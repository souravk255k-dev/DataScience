# electricity_regression_fixed.py

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, r2_score

# Load dataset
data = pd.read_csv("electricity_cost_dataset.csv")

# Features (independent variables) and target (electricity cost)
X = data.drop(columns=["electricity cost"])   # all columns except target
y = data["electricity cost"]

# Handle categorical columns (convert 'structure type' to numbers)
X = pd.get_dummies(X, drop_first=True)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Train model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluation
print("Intercept:", model.intercept_)
print("Coefficients:")
for col, coef in zip(X.columns, model.coef_):
    print(f"  {col}: {coef:.4f}")

print("\nMean Absolute Error:", mean_absolute_error(y_test, y_pred))
print("RÂ² Score:", r2_score(y_test, y_pred))

# ---- FIXED: Create sample with correct feature columns ----
sample = pd.DataFrame(columns=X.columns)
sample.loc[0] = 0  # initialize with zeros

sample["site area"] = 2000
sample["water consumption"] = 3000
sample["recycling rate"] = 40
sample["utilisation rate"] = 70
sample["air qality index"] = 150
sample["issue reolution time"] = 10
sample["resident count"] = 100

# If Residential is in dummy columns, set it to 1
if "structure type_Residential" in sample.columns:
    sample["structure type_Residential"] = 1

# Predict custom input
predicted_cost = model.predict(sample)
print("\nPredicted Electricity Cost for sample input:", predicted_cost[0])

# Visualization: Actual vs Predicted
plt.scatter(y_test, y_pred, color="blue")
plt.xlabel("Actual Electricity Cost")
plt.ylabel("Predicted Electricity Cost")
plt.title("Actual vs Predicted Electricity Cost")
plt.plot([y.min(), y.max()], [y.min(), y.max()], "r--")  # reference line
plt.show()
