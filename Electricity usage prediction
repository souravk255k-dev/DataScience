import os
from datetime import datetime, timedelta
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import joblib

def generate_synthetic_data(n_days=365):
    start = datetime(2020, 1, 1)
    periods = n_days * 24
    timestamps = [start + timedelta(hours=i) for i in range(periods)]
    df = pd.DataFrame({'timestamp': timestamps})
    df['hour'] = df['timestamp'].dt.hour
    df['temperature'] = 20 + 10*np.sin(2*np.pi*(df['hour']/24)) + np.random.normal(0, 1, periods)
    df['humidity'] = 60 + 20*np.cos(2*np.pi*(df['hour']/24)) + np.random.normal(0, 3, periods)
    df['consumption'] = (
        0.5*df['hour'].apply(lambda h: 1 if 6 <= h <= 9 or 18 <= h <= 22 else 0.6)
        + 0.03*(30 - df['temperature'])
        + 0.002*df['humidity']
        + np.random.normal(0, 0.2, periods)
    )
    df['consumption'] = (df['consumption'] * 2.5).clip(lower=0.1)
    return df

def prepare_features(df):
    X = df[['hour','temperature','humidity']]
    y = df['consumption']
    return X, y

def train_and_evaluate(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    model.fit(X_train, y_train)
    preds = model.predict(X_test)
    mae = mean_absolute_error(y_test, preds)
    rmse = mean_squared_error(y_test, preds, squared=False)
    r2 = r2_score(y_test, preds)
    print(f"MAE: {mae:.4f}")
    print(f"RMSE: {rmse:.4f}")
    print(f"R2: {r2:.4f}")
    return model

def save_model(model, path='models/model.joblib'):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    joblib.dump(model, path)
    print('Saved model to', path)

if __name__ == '__main__':
    df = generate_synthetic_data(n_days=365)
    X, y = prepare_features(df)
    model = train_and_evaluate(X, y)
    save_model(model)
